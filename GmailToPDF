function GmailToPDF() {

  // Set Email From, Name, Target Folder ID, and Label
  const vendors = [
    ["no_reply@email.apple.com","Apple","xxxxx","Receipt"],
    ["applesupport@email.apple.com","Apple","xxxxx","Warranty"],
    ["airregi.jp","Airレジ","xxxxx","Receipt"]
  ];

  const labelToPDF = GmailApp.getUserLabelByName('ToPDF');
  const query = 'label:topdf';
  const threads = GmailApp.search(query);
  
  try {
    for (const thread of threads) {
      let setLabel = '';
      const messages = thread.getMessages();

      for (const message of messages) {
        let fromAddress = message.getFrom();
        let fromVendor = 'Vendor';
        let folderID = '';

        for (const vendor of vendors) {        
          if (fromAddress.includes(vendor[0])) {
            fromVendor = vendor[1];
            folderID = vendor[2];
            if (vendor[3].length) { setLabel = vendor[3]; }
            break;
          }
        }
        let blob = message.getBody();
        blob = InlineImages_(blob);
        blob = Utilities.newBlob(blob,'text/html').getAs('application/pdf');

        let date = message.getDate();
        let docTitle = `${Utilities.formatDate(date, 'JST', 'yyyyMMdd_HHmmss')}_${fromVendor}`;
        blob.setName(docTitle + '.pdf'); 

        const folder = DriveApp.getFolderById(folderID);
        folder.createFile(blob);
      }
      thread.removeLabel(labelToPDF);
      if (setLabel.length) { thread.addLabel(GmailApp.getUserLabelByName(setLabel)); }
    }
  } catch(e) {
    Logger.log(e.message);
  }
}

function InlineImages_(html) {

  return html.replace(/<img[^>]+src="([^">]+)"/g, function(match, src) {
    try {
      let response = UrlFetchApp.fetch(src);
      let contentType = response.getBlob().getContentType();
      let base64 = Utilities.base64Encode(response.getContent());
      let base64Url = 'data:' + contentType + ';base64,' + base64;
      return match.replace(src, base64Url);
    } catch (e) {
      Logger.log(e.message);
      return match;
    }
  });
}
